#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Pass2.h"

struct Passenger *LoadPass (char *file2, struct Passenger *vad, int *hush)
  {
  FILE *f;
  char s[100];
  int i;
  int m;
  m=0;
  
  f=fopen (file2, "r");
  if (f == NULL)
   {
   printf("Невозможно открыть файл\n");
   return NULL;
   }
  while (fgets (s, 111, f))
    m++;
  fclose (f);
  f=fopen(file2, "r");
  if (m!=0)
    {
    vad=(struct Passenger*)malloc(sizeof(struct Passenger)*m);
    for (i=0; i<m; i++)
      fscanf(f, "%s%s%s%d%s%s", vad[i].surname, vad[i].name, vad[i].secname, &vad[i].pasport, vad[i].numTicket, vad[i].numTrip);
    }
  else
    printf("Пассажиров нет");
  fclose(f);
  *hush=m;
  if(vad==NULL)
    printf ("Данных нет\n");
  return vad;
  }

struct Voyage *LoadVo (char *file1, struct Voyage *ghul, int *hush)
  {
  FILE *g;
  char s[100];
  int i;
  int m;
  m=0;
  
  g=fopen (file1, "r");
  if (g == NULL)
   {
   printf("Невозможно открыть файл\n");
   return NULL;
   }
  while (fgets (s, 111, g))
    m++;
  fclose (g);
  g=fopen(file1, "r");
  if (m!=0)
    {
    ghul=(struct Voyage*)malloc(sizeof(struct Voyage)*m);
    for (i=0; i<m; i++)
      fscanf(g, "%s%s%s%d%d", ghul[i].numVoyage, ghul[i].way, ghul[i].date, &ghul[i].sit, &ghul[i].freeSit);
    }
  else
    printf("Пассажиров нет");
  fclose(g);
  *hush=m;
  if(ghul==NULL)
    printf ("Данных нет\n");
  return ghul;
  }
   
int inputPass(char *file1 ,char *file2, struct Voyage *ghul, int l)
  {
  FILE *f;
  int i, o=0;
  int h, t=1;
  struct Passenger new;
  
  f=fopen (file2,"a");
  if(f == NULL)
    {
    printf("Невозможно открыть файл\n");
    return 1;
    }
  
  printf("Добавление пассажира\n\nВведите Ф.И.О. пассажира: ");
  scanf("%s%s%s", new.surname, new.name, new.secname);
  printf("Введите номер паспорта пассажира: ");
  scanf("%d", &new.pasport);
  printf("Введите номер билета пассажира: ");
  scanf("%s", new.numTicket);
  printf("Введите номер рейса пассажира: ");
  scanf("%s", new.numTrip);
  for(i=0; i<l; i++)
    if (strcmp (new.numTrip, ghul[i].numVoyage) == 0)
	if(ghul[i].freeSit==0)
	  {
	  printf("Невозможно добавить пассажира\n");
	  return 1;
	  }
        else
	  {
      	  o++;
     	  h=ghul[i].freeSit;
     	  h=h-1; 
      	  ghul[i].freeSit=h;
      	  printf("%d\n", ghul[i].freeSit);
      	  SaveVo(file1, ghul, l);
      	  }
  if (o==0)
    {
    printf("Такого рейса не существует\n");
    return 1;
    }
  for(i=0; i<l; i++)
    if (strcmp (new.numTrip, ghul[i].numVoyage) == 0)
	
  fprintf (f, "%s ", new.surname);
  fprintf (f, "%s ", new.name);
  fprintf (f, "%s ", new.secname);
  fprintf (f, "%d ", new.pasport);
  fprintf (f, "%s ", new.numTicket);
  fprintf (f, "%s\n", new.numTrip);
  fclose (f);
  }
  
int inputVoyage(char *file1)
  {
  FILE *f;
  struct Voyage new;
  
  f=fopen (file1, "a");
  if(f == NULL)
    {
    printf("Невозможно открыть файл\n");
    return 1;
    }
  printf("Введите номер рейса: ");
  scanf("%s", new.numVoyage);
  printf("Введите направление рейса: ");
  scanf("%s", new.way);
  printf("Введите дату вылета рейса: ");
  scanf("%s", new.date);
  printf("Введите количество мест на рейсе: ");
  scanf("%d", &new.sit);
  printf("Введите количество свободных мест на рейсе: ");
  scanf("%d", &new.freeSit);
	if(new.sit<new.freeSit)
	  {
	  printf("Некорректные данные\n");
	  return 1;
	  }
	if(new.sit<=0)
	  {
	  printf("Некорректные данные\n");
	  return 1;
	  }
	if(new.freeSit<0)
	  {
	  printf("Некорректные данные\n");
	  return 1;
	  }

  fprintf (f, "%s ", new.numVoyage);
  fprintf (f, "%s ", new.way);
  fprintf (f, "%s ", new.date);
  fprintf (f, "%d ", new.sit);
  fprintf (f, "%d\n", new.freeSit);
  
  fclose (f);
  }
  
void vyvodPass(struct Passenger *vad, int k)
  {
  int i, p=0;
  printf("Пассажиры: \n");
  if (vad!=NULL)
    for (i=0; i<k; i++)
      {
      p++;
      printf("%d. %s %s %s %d %s %s\n", p, vad[i].surname, vad[i].name, vad[i].secname, vad[i].pasport, vad[i].numTicket, vad[i].numTrip);
      }
  else
    printf("Пассажиров нет\n");
  }        

void vyvodVo(struct Voyage *ghul, int l)
  {
  int i, p=0;
  printf("Рейсы: \n");
  if (ghul!=NULL)
    for (i=0; i<l; i++)
      {
      p++;
      printf("%d. %s %s %s %d %d\n", p, ghul[i].numVoyage, ghul[i].way, ghul[i].date, ghul[i].sit, ghul[i].freeSit);
      }
  else
    printf("Рейсов нет\n");
  }

int SavePass(char *file2, struct Passenger *vad, int k)
  {
  int i;
  FILE *f;
  f=fopen(file2, "w");
  if (vad!=0)
    for (i=0; i<k; i++)
      {
      fprintf(f, "%s ", vad[i].surname);
      fprintf(f, "%s ", vad[i].name);
      fprintf(f, "%s ", vad[i].secname);
      fprintf(f, "%d ", vad[i].pasport);
      fprintf(f, "%s ", vad[i].numTicket);
      fprintf(f, "%s\n", vad[i].numTrip);
      }
  fclose(f);
  return 0;
  }

int SaveVo(char *file1, struct Voyage *ghul, int l)
  {
  int i;
  FILE *g;
  g=fopen(file1, "w");
  if (ghul!=0)
    for (i=0; i<l; i++)
      {
      fprintf(g, "%s ", ghul[i].numVoyage);
      fprintf(g, "%s ", ghul[i].way);
      fprintf(g, "%s ", ghul[i].date);
      fprintf(g, "%d ", ghul[i].sit);
      fprintf(g, "%d\n", ghul[i].freeSit);
      }
  fclose(g);
  return 0;
  }

void findPass (struct Passenger *vad, int k)
{
  int m; 
  char s[40], n[40], f[40]; 
  int p=0; 
  float h;
  int d; 
  int i;
  if (vad!=NULL)
    {
    scanf ("%d", &m);
    switch (m)
      {
      case 1:
        printf ("Введите Ф.И.О. пассажира, которого Вы хотите найти:\n");
	printf ("Фамилия: ");
        scanf ("%s", s);
	printf ("Имя: ");
        scanf ("%s", n);
	printf ("Отчество: ");
        scanf ("%s", f);
        for (i=0; i<k; i++)
          if (strcmp (vad[i].surname, s) == 0)
		if (strcmp (vad[i].name, n) == 0)
			 if (strcmp (vad[i].secname, f) == 0)
         		   {
	   		   p++;
            		   printf ("\n%d.%s %s %s   %d   %s   %s\n", i+1, vad[i].surname, vad[i].name, vad[i].secname, vad[i].pasport, vad[i].numTicket, vad[i].numTrip);
			   }
	if (p==0)
	   printf("Пассажир не найден\n");
      break;
      case 2:
        printf ("Введите номер паспорта пассажира, которого Вы хотите найти: ");
        scanf ("%d", &d);
        for (i=0; i<k; i++)
          if (vad[i].pasport == d)
            {
	    p++;
            printf ("\n%d.%s %s %s   %d   %s   %s\n", i+1, vad[i].surname, vad[i].name, vad[i].secname, vad[i].pasport, vad[i].numTicket, vad[i].numTrip);
            }
	if (p==0)
	   printf("Пассажир не найден\n");
      break;
      case 3:
        printf ("Введите номер билета, который Вы хотите найти: ");
        scanf ("%s", s);
        for (i=0; i<k; i++)
          if (strcmp(vad[i].numTicket, s) == 0)
           {
	   p++;
           printf ("\n%d.%s %s %s   %d   %s   %s\n", i+1, vad[i].surname, vad[i].name, vad[i].secname, vad[i].pasport, vad[i].numTicket, vad[i].numTrip);
           }
	if (p==0)
	   printf("Пассажир не найден\n");
      break;
      case 4:
      printf ("Введите номер рейса, который Вы хотите найти: ");
      scanf ("%s", s);
      for (i=0; i<k; i++)
          {
          if (strcmp (vad[i].numTrip, s) == 0)
            {
	    p++;
            printf ("\n%d.%s %s %s   %d   %s   %s\n", i+1, vad[i].surname, vad[i].name, vad[i].secname, vad[i].pasport, vad[i].numTicket, vad[i].numTrip);
	    }
          }
	if (p==0)
	   printf("Пассажир не найден\n");
      break;
      case 0:
      printf ("Выход из поиска\n");
      break;
      default:
        printf ("Такого пункта в меню нет\n");
    };
   }
  else
    printf ("Данные не считаны!\n");
}

void findVo (struct Voyage *ghul, int l)
{
  int m, p=0; 
  char s[40];
  int d; 
  int i;
  if (ghul!=NULL)
    {
    scanf ("%d", &m);
    switch (m)
	{
	case 1:
	  printf("Введите номер рейса, который вы хотите найти: ");
	  scanf ("%s", s);
	  for (i=0; i<l; i++)
	    if (strcmp(ghul[i].numVoyage, s) == 0)
		{
		p++;
                printf ("\n%d.%s   %s   %s   %d   %d\n", i+1, ghul[i].numVoyage, ghul[i].way, ghul[i].date, ghul[i].sit, ghul[i].freeSit);
		}
	if (p==0)
	   printf("Рейс не найден\n");
        break;
        case 2:
          printf("Введите направление рейса, который вы хотите найти: ");
	  scanf ("%s", s);
	  for (i=0; i<l; i++)
	    if (strcmp(ghul[i].way, s) == 0)
		{
		p++;
                printf ("\n%d.%s   %s   %s   %d   %d\n", i+1, ghul[i].numVoyage, ghul[i].way, ghul[i].date, ghul[i].sit, ghul[i].freeSit);
		}
	  if (p==0)
	   printf("Рейс не найден\n");
        break;
        case 3:
          printf("Введите дату вылета рейса, который вы хотите найти: ");
	  scanf ("%s", s);
	  for (i=0; i<l; i++)
	    if (strcmp(ghul[i].date, s) == 0)
		{
		p++;
                printf ("\n%d.%s   %s   %s   %d   %d\n",i+1, ghul[i].numVoyage, ghul[i].way, ghul[i].date, ghul[i].sit, ghul[i].freeSit);
		}
	if (p==0)
	   printf("Рейс не найден\n");
        break;
        case 4:
          printf("Введите количество мест на рейсе, который вы хотите найти: ");
	  scanf ("%d", &d);
	  for (i=0; i<l; i++)
	    if (ghul[i].sit == d)
		{p++;
                printf ("\n%d.%s   %s   %s   %d   %d\n", i+1, ghul[i].numVoyage, ghul[i].way, ghul[i].date, ghul[i].sit, ghul[i].freeSit);
		}
	if (p==0)
	   printf("Рейс не найден\n");
        break;
        case 5:
          printf("Введите количество мест на рейсе, который вы хотите найти: ");
	  scanf ("%d", &d);
	  for (i=0; i<l; i++)
	    if (ghul[i].freeSit == d)
		{
		p++;
                printf ("\n%d.%s   %s   %s   %d   %d\n", i+1, ghul[i].numVoyage, ghul[i].way, ghul[i].date, ghul[i].sit, ghul[i].freeSit);
		}
	if (p==0)
	   printf("Рейс не найден\n");
        break;
	default:
        printf ("Такого пункта в меню нет\n");
	};
     }
   else
     printf ("Данные не считаны!\n"); 
 }

void DelPass(char *file1, char *file2, struct Passenger *vad, struct Voyage *ghul, int k, int l)
  {
  FILE *f;
  int del, i, m, h, n=0;
  char s[100];
  f=fopen (file2, "r");
  if (f == NULL)
    {
    printf("Невозможно открыть файл\n");
    return;
    }
  while (fgets (s, 100, f))
    n++;
  fclose (f);
  printf ("Удаление пассажира:\n\nВведите номер пассажира, которого Вы хотите удалить: ");
  scanf ("%d", &del);
  if (vad!=NULL)
    if(del<=n&&del>0)
      {
      for (i=del; i<k; i++)
    
        vad[i-1]=vad[i];
	
      for (m=0; m<l; m++)
        if (strcmp(vad[del-1].numTrip, ghul[m].numVoyage) == 0)
	      {
	      h=ghul[m].freeSit;
	      h=h+1;
	      ghul[m].freeSit=h;
              SaveVo (file1, ghul, l);
	      } 
      k=k-1;
      printf ("Пассажир №%d успешно удален\n", del);
      SavePass (file2, vad, k);
      }
    else
      {
      printf("Такого пассажира не существует\n");
      return;
      }
  }

void delVo(char *file1, char *file2, struct Voyage *ghul, struct Passenger *vad, int l, int k)
  {
  FILE *g;
  char s[100];
  int del, i, h, m=0;
  
  g=fopen (file1, "r");
  if (g == NULL)
    {
    printf("Невозможно открыть файл\n");
    return;
    }
  while (fgets (s, 100, g))
    m++;
  fclose (g);
  printf ("Удаление рейса:\n\nВведите номер строки рейса, который Вы хотите удалить: ");
  scanf ("%d", &del);
  if (ghul!=NULL)
    if (del<=m&&del>0)	
    {
    for (i=del; i<l; i++)
      ghul[i-1]=ghul[i];
    if (vad!=NULL)
      {
      for (h=0; h<k; h++)      
	if (strcmp(vad[h].numTrip, ghul[del-1].numVoyage) == 0)
	   DelPass(file1, file2, vad, ghul, k, l);
      k=k-1;
      }              
    l=l-1;
    printf ("Рейс №%d успешно удален\n", del);
    SaveVo (file1, ghul, l);
    SavePass (file2, vad, k);
    }
    else
      {
      printf("Такого рейса не существует\n");
      return;
      }
  }
